#include <iostream>
#include <conio.h>

using namespace std;

//Шупик Карина 202ТН

/*class Base {
public:
	virtual void myname() { 
		cout << "This is class Base" << endl; 
	}
};

Від цього класу треба створити два похідних класу: DerA і DerB.
Від класів DerA і DerB шляхом множинного успадкування створити клас
DerAB.
Перевизначити у кожному з створених класів функцію myname таким
чином, щоб вона виводила на екран дійсне ім’я класу об’єкту, для якого вона
викликається.
Для кожного з класів створеної ієрархії створити по одному об’єкту і для
кожного з них викличте функцію myname.
Створіть масив із 4 покажчиків на базовий клас ієрархії. Для кожного з них
створіть динамічний об’єкт, по одному для кожного з класів ієрархії. Запишіть
виклик функції myname для кожного з динамічних об’єктів за допомогою
покажчиків.*/

class Base
{
public:
	virtual void myname() {//базовий клас
		cout << "This is class Base" << endl; 
	}
};

class DerA : public Base {//похідний клас DerA
public:
	virtual void myname() { 
		cout << "This is class DerA" << endl; 
	}
};
class DerB : public Base {//похідний клас DerB
public:
	virtual void myname() { 
		cout << "This is class DerB" << endl; 
	}
};

class DerAB : public DerA, public DerB {//dід класів DerA і DerB шляхом множинного успадкування створений клас DerAB
public:
	virtual void myname() {
		cout << "This is class DerAB" << endl;
	}
};


int main()
{
	Base Object1; 
	DerA Object2;
	DerB Object3; 
	DerAB Object4;
	Object1.myname();//виводимо в консоль значення функції myname
	Object2.myname(); 
	Object3.myname(); 
	Object4.myname();

	Base* Arr[4];//масив вказівників на Base
	Arr[0] = new Base; //для кожного з елемента створюєма динамічний об’єкт, по одному для кожного з класів ієрархії.
	Arr[1] = new DerA;
	Arr[2] = new DerB; 
	Arr[3] = (DerA*)new DerAB;

	Arr[0]->myname(); //отримуємо доступ до елементів класів,
	Arr[1]->myname(); //записуємо виклик функції myname для кожного з динамічних об’єктів за допомогою вказівника
	Arr[2]->myname(); 
	Arr[3]->myname();
	return 0;
} 
